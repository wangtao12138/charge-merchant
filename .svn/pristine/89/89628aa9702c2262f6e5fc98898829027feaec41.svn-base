package cn.com.cdboost.charge.merchant.service;


import cn.com.cdboost.charge.base.util.UuidUtil;
import cn.com.cdboost.charge.base.vo.PageData;
import cn.com.cdboost.charge.merchant.common.BaseServiceImpl;
import cn.com.cdboost.charge.merchant.constant.ChargeConstant;
import cn.com.cdboost.charge.merchant.dao.DeviceMapper;
import cn.com.cdboost.charge.merchant.model.Device;
import cn.com.cdboost.charge.merchant.vo.info.DeviceVo;
import cn.com.cdboost.charge.merchant.vo.param.DeviceQueryParam;
import com.alibaba.dubbo.config.annotation.Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import java.util.List;

@Slf4j
@Service(version = "1.0",retries = -1)
public class DeviceServiceImpl extends BaseServiceImpl<Device> implements DeviceServiceDubbo {
    @Autowired
    private DeviceMapper deviceMapper;
    @Override
    public PageData queryProjectByProjectGuid(DeviceQueryParam queryVo) {
        Condition condition = new Condition(Device.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("projectGuid",queryVo.getProjectGuid());
        // 设置分页信息
        PageHelper.startPage(queryVo.getPageNumber(),queryVo.getPageSize(),"id desc");
        List<Device> devices = deviceMapper.selectByCondition(condition);
        PageInfo pageInfo = new PageInfo(devices);

        List<DeviceVo> projectVos = Lists.newArrayList();
        for (Device device : devices) {
            DeviceVo vo = new DeviceVo();
            BeanUtils.copyProperties(device,vo);
            projectVos.add(vo);
        }
        //封装返回对象
        PageData pageData = new PageData();
        pageData.setList(projectVos);
        pageData.setTotal(pageInfo.getTotal());
        return pageData;
    }

    @Override
    @Transactional
    public void addDevice(DeviceVo vo) {
        Device device = new Device();
        BeanUtils.copyProperties(vo,device);
        device.setChargingPlieGuid(UuidUtil.getUuid());
        deviceMapper.insertSelective(device);
    }

    @Override
    @Transactional
    public void updateDevice(DeviceVo vo) {
        Device device = new Device();
        BeanUtils.copyProperties(vo,device);
        Condition condition = new Condition(Device.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("chargingPlieGuid",vo.getChargingPlieGuid());
        deviceMapper.updateByConditionSelective(device,condition);
    }

    @Override
    @Transactional
    public void deleteDeviceByDeviceGuids(List<String> deviceGuids) {
        Condition condition = new Condition(Device.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andIn("chargingPlieGuid",deviceGuids);
        Device device = new Device();
        device.setIsDel(ChargeConstant.IsDel.DEL.getStatus());
        deviceMapper.updateByConditionSelective(device,condition);
    }
}
