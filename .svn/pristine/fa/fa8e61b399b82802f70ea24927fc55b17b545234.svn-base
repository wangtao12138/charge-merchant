package cn.com.cdboost.charge.merchant.service;

import cn.com.cdboost.charge.base.util.UuidUtil;
import cn.com.cdboost.charge.base.vo.PageData;
import cn.com.cdboost.charge.merchant.common.BaseServiceImpl;
import cn.com.cdboost.charge.merchant.constant.ChargeConstant;
import cn.com.cdboost.charge.merchant.dao.ProjectMapper;
import cn.com.cdboost.charge.merchant.model.Project;
import cn.com.cdboost.charge.merchant.vo.info.ProjectVo;
import cn.com.cdboost.charge.merchant.vo.param.ProjectQueryParam;
import com.alibaba.dubbo.config.annotation.Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import java.util.List;

@Slf4j
@Service(version = "1.0",retries = -1)
public class ProjectServiceImpl extends BaseServiceImpl<Project> implements ProjectService{
    @Autowired
    private ProjectMapper projectMapper;
    @Override
    public PageData queryProjectByPropertyGuid(ProjectQueryParam queryVo) {
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("propertyGuid",queryVo.getPropertyGuid());
        // 设置分页信息
        PageHelper.startPage(queryVo.getPageNumber(),queryVo.getPageSize(),"id desc");
        List<Project> projects = projectMapper.selectByCondition(condition);
        PageInfo pageInfo = new PageInfo(projects);

        List<ProjectVo> projectVos = Lists.newArrayList();
        for (Project project : projects) {
            ProjectVo vo = new ProjectVo();
            BeanUtils.copyProperties(project,vo);
            projectVos.add(vo);
        }
        //封装返回对象
        PageData pageData = new PageData();
        pageData.setList(projectVos);
        pageData.setTotal(pageInfo.getTotal());
        return pageData;
    }

    @Override
    @Transactional
    public void addProject(ProjectVo queryVo) {
        Project project = new Project();
        BeanUtils.copyProperties(queryVo,project);
        project.setProjectGuid(UuidUtil.getUuid());
        projectMapper.insertSelective(project);
    }

    @Override
    @Transactional
    public void updateProject(ProjectVo queryVo) {
        Project project = new Project();
        BeanUtils.copyProperties(queryVo,project);
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("propertyGuid",queryVo.getPropertyGuid());
        projectMapper.updateByConditionSelective(project,condition);
    }

    @Override
    @Transactional
    public void deleteProjectByProjectGuids(List<String> projectGuids) {
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andIn("projectGuid",projectGuids);
        Project project = new Project();
        project.setIsDel(ChargeConstant.IsDel.DEL.getStatus());
        projectMapper.updateByConditionSelective(project,condition);
    }
}
