package cn.com.cdboost.charge.merchant.service.impl;

import cn.com.cdboost.charge.base.vo.PageData;
import cn.com.cdboost.charge.merchant.common.BaseServiceImpl;
import cn.com.cdboost.charge.merchant.constant.DeviceConstant;
import cn.com.cdboost.charge.merchant.dao.ProjectMapper;
import cn.com.cdboost.charge.merchant.model.Device;
import cn.com.cdboost.charge.merchant.model.Project;
import cn.com.cdboost.charge.merchant.service.IProjectService;
import cn.com.cdboost.charge.merchant.vo.param.ProjectQueryParam;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import java.util.Date;
import java.util.List;

@Service
public class IProjectServiceImpl extends BaseServiceImpl<Project> implements IProjectService {
    @Autowired
    private ProjectMapper projectMapper;

    @Override
    public List<Project> queryProjectsByCondition(String projectGuid,String projectName) {
        //判断修改站点名称是否重复
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andNotEqualTo("projectGuid",projectGuid);
        criteria.andEqualTo("projectName",projectName);
        List<Project> projects = projectMapper.selectByCondition(condition);
        return projects;
    }

    @Override
    public void updateByPropertyGuid(Project project) {
        project.setUpdateTime(new Date());
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("propertyGuid",project.getPropertyGuid());
        projectMapper.updateByConditionSelective(project,condition);
    }

    @Override
    public void batchDelete(List<String> projectGuids) {
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andIn("projectGuid",projectGuids);
        Project project = new Project();
        project.setIsDel(DeviceConstant.IsDel.DEL.getStatus());
        projectMapper.updateByConditionSelective(project,condition);
    }

    @Override
    public List<Project> queryProjects(List<String> projectGuids) {
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andIn("projectGuid",projectGuids);
        List<Project> projects = projectMapper.selectByCondition(condition);
        return projects;
    }

    @Override
    public PageData<Project> queryProjectsPage(ProjectQueryParam queryVo) {
        PageData pageData = new PageData();
        Condition condition = new Condition(Project.class);
        Example.Criteria criteria = condition.createCriteria();
        if (!StringUtils.isEmpty(queryVo.getProjectName())) {
            criteria.andEqualTo("projectName", queryVo.getProjectName());
        }
        if (!StringUtils.isEmpty(queryVo.getPropertyGuid())) {
            criteria.andEqualTo("propertyGuid", queryVo.getPropertyGuid());
        }
        PageHelper.startPage(queryVo.getPageNumber(),queryVo.getPageSize(),"id desc");
        List<Project> projects = projectMapper.selectByCondition(condition);
        // 设置分页总条数
        PageInfo<Project> pageInfo = new PageInfo<>(projects);
        pageData.setList(projects);
        pageData.setTotal(pageInfo.getTotal());
        return pageData;
    }
}
