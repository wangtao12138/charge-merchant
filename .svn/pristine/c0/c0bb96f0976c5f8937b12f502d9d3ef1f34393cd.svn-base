package cn.com.cdboost.charge.merchant.dubbo.impl;

import cn.com.cdboost.charge.merchant.constant.ChargeAppConstant;
import cn.com.cdboost.charge.merchant.constant.SchemeConstant;
import cn.com.cdboost.charge.merchant.dao.ProjectPayChemeMapper;
import cn.com.cdboost.charge.merchant.model.ComPayCheme;
import cn.com.cdboost.charge.merchant.model.ProjectPayCheme;
import cn.com.cdboost.charge.merchant.dubbo.PaySchemeService;
import cn.com.cdboost.charge.merchant.service.IComPaySchemeService;
import cn.com.cdboost.charge.merchant.service.IPaySchemeService;
import cn.com.cdboost.charge.merchant.vo.info.PaySchemeVo;
import com.alibaba.dubbo.config.annotation.Service;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import java.util.List;
import java.util.Set;

@Slf4j
@Service(version = "1.0",retries = -1)
public class PaySchemeServiceImpl implements PaySchemeService {
    @Resource
    private IPaySchemeService iPaySchemeService;
    @Resource
    private IComPaySchemeService iComPaySchemeService;
    @Autowired
    private ProjectPayChemeMapper projectPayChemeMapper;

    @Override
    public PaySchemeVo queryPaySchemeBySchemeGuid(String schemeGuid) {
        PaySchemeVo paySchemeVo = new PaySchemeVo();
        ProjectPayCheme param = new ProjectPayCheme();
        param.setSchemeGuid(schemeGuid);
        //查询项目方案信息表
        ProjectPayCheme projectPayCheme = iPaySchemeService.selectOne(param);
        if (projectPayCheme != null){//判断项目方案表是否存在此方案
            BeanUtils.copyProperties(projectPayCheme,paySchemeVo);
        }
        ComPayCheme comPayCheme = new ComPayCheme();
        comPayCheme.setSchemeGuid(schemeGuid);
        //查询公共方案信息表
        ComPayCheme comPayChemeSelect = iComPaySchemeService.selectOne(comPayCheme);
        BeanUtils.copyProperties(comPayChemeSelect,paySchemeVo);
        return paySchemeVo;
    }

    @Override
    public List<PaySchemeVo> querySchemeList4ChargePage(String projectGuid) {
        List<PaySchemeVo> paySchemeVos = Lists.newArrayList();
        Condition condition = new Condition(ProjectPayCheme.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("projectGuid", projectGuid);
        criteria.andEqualTo("isEnable",1);
        criteria.andEqualTo("schemeType",0);
        Set<Integer> set = Sets.newHashSet();
        set.add(SchemeConstant.SchemePayCategory.BALANCE_RECHARGE.getType());
        set.add(SchemeConstant.SchemePayCategory.IC_RECHARGE.getType());
        criteria.andNotIn("payCategory", set);
        condition.setOrderByClause("power,sort_no,money ASC");
        List<ProjectPayCheme> projectPayChemes = projectPayChemeMapper.selectByCondition(condition);
        for (ProjectPayCheme projectPayCheme : projectPayChemes) {
            PaySchemeVo vo = new PaySchemeVo();
            BeanUtils.copyProperties(projectPayCheme,vo);
            paySchemeVos.add(vo);
        }
        return paySchemeVos;
    }
    @Override
    public List<PaySchemeVo> querySchemeTwoList(String projectGuid) {
        List<PaySchemeVo> list = Lists.newArrayList();
        Condition condition = new Condition(ProjectPayCheme.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("projectGuid", projectGuid);
        criteria.andEqualTo("isEnable",1);
        criteria.andEqualTo("schemeType",1);
        criteria.andEqualTo("payCategory",SchemeConstant.SchemePayCategory.TEMPORARY_RECHARGE.getType());
        condition.setOrderByClause("power,money ASC");
        List<ProjectPayCheme> projectPayChemes = projectPayChemeMapper.selectByCondition(condition);
        for (ProjectPayCheme projectPayCheme : projectPayChemes) {
            PaySchemeVo vo = new PaySchemeVo();
            BeanUtils.copyProperties(projectPayCheme,vo);
            list.add(vo);
        }
        return list;
    }

    @Override
    public List<PaySchemeVo> querySchemeList4ActivityPage() {
        Condition condition = new Condition(ProjectPayCheme.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("payCategory",SchemeConstant.SchemePayCategory.BALANCE_RECHARGE.getType());
        criteria.andEqualTo("isEnable",1);
        criteria.andEqualTo("schemeType",0);
        condition.setOrderByClause("money ASC");

        List<ProjectPayCheme> projectPayChemes = projectPayChemeMapper.selectByCondition(condition);
        List<PaySchemeVo> list = Lists.newArrayList();
        for (ProjectPayCheme projectPayCheme : projectPayChemes) {
            PaySchemeVo vo = new PaySchemeVo();
            BeanUtils.copyProperties(projectPayCheme,vo);
            list.add(vo);
        }
        return list;
    }
}
