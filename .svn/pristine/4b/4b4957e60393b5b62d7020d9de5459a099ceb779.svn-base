package cn.com.cdboost.charge.merchant.service;


import cn.com.cdboost.charge.base.util.UuidUtil;
import cn.com.cdboost.charge.base.vo.PageData;
import cn.com.cdboost.charge.merchant.common.BaseServiceImpl;
import cn.com.cdboost.charge.merchant.constant.ChargeConstant;
import cn.com.cdboost.charge.merchant.dao.MerchantPropertyMapper;
import cn.com.cdboost.charge.merchant.dto.MerchantPropertyDto;
import cn.com.cdboost.charge.merchant.dto.param.MerchantPropertyParam;
import cn.com.cdboost.charge.merchant.model.MerchantProperty;
import cn.com.cdboost.charge.merchant.vo.info.MerchantPropertyVo;
import cn.com.cdboost.charge.merchant.vo.param.PropertyQueryParam;
import com.alibaba.dubbo.config.annotation.Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import java.util.List;

@Slf4j
@Service(version = "1.0",retries = -1)
public class MerchantPropertyServiceImpl extends BaseServiceImpl<MerchantProperty> implements MerchantPropertyServiceDubbo {
    @Autowired
    private MerchantPropertyMapper merchantPropertyMapper;

    @Override
    public PageData queryPropertyByMerchantGuid(PropertyQueryParam queryVo) {
        Condition condition = new Condition(MerchantProperty.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("merchantGuid",queryVo.getMerchantGuid());
        // 设置分页信息
        PageHelper.startPage(queryVo.getPageNumber(),queryVo.getPageSize(),"id desc");
        List<MerchantProperty> merchantProperties = merchantPropertyMapper.selectByCondition(condition);

        List<MerchantPropertyVo> merchantPropertyVos = Lists.newArrayList();
        for (MerchantProperty merchantProperty : merchantProperties) {
            MerchantPropertyVo vo = new MerchantPropertyVo();
            BeanUtils.copyProperties(merchantProperty,vo);
            merchantPropertyVos.add(vo);
        }
        //封装返回对象
        PageInfo pageInfo = new PageInfo(merchantPropertyVos);
        PageData pageData = new PageData();
        pageData.setList(merchantPropertyVos);
        pageData.setTotal(pageInfo.getTotal());
        return pageData;
    }

    @Override
    @Transactional
    public void addProperty(MerchantPropertyVo merchantPropertyVo) {
        MerchantProperty merchantProperty = new MerchantProperty();
        BeanUtils.copyProperties(merchantPropertyVo,merchantProperty);
        merchantProperty.setPropertyGuid(UuidUtil.getUuid());
        merchantProperty.setPropertyState(ChargeConstant.IsDel.NOTDEL.getStatus());
        merchantProperty.setPropertyState(ChargeConstant.PropertyState.NOT_STOP.getStatus());
        merchantPropertyMapper.insertSelective(merchantProperty);
    }

    @Override
    @Transactional
    public void updateProperty(MerchantPropertyVo merchantPropertyVo) {
        MerchantProperty merchantProperty = new MerchantProperty();
        BeanUtils.copyProperties(merchantPropertyVo,merchantProperty);
        Condition condition = new Condition(MerchantProperty.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("merchantGuid",merchantPropertyVo.getMerchantGuid());
        merchantPropertyMapper.updateByConditionSelective(merchantProperty,condition);
    }

    @Override
    @Transactional
    public void deletePropertyByPropertyGuids(List<String> propertyGuids) {
        Condition condition = new Condition(MerchantProperty.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andIn("propertyGuid",propertyGuids);
        MerchantProperty merchantProperty = new MerchantProperty();
        merchantProperty.setIsDel(ChargeConstant.IsDel.DEL.getStatus());
        //置为删除状态
        merchantPropertyMapper.updateByConditionSelective(merchantProperty,condition);
    }

    @Override
    public List<MerchantPropertyVo> queryAllMerchantProperty(PropertyQueryParam queryVo) {
        MerchantPropertyParam param = new MerchantPropertyParam();
        BeanUtils.copyProperties(queryVo,param);
        List<MerchantPropertyDto> merchantPropertyDtos = merchantPropertyMapper.queryMerchantPropertyDto(param);
        List<MerchantPropertyVo> merchantPropertyVoList = Lists.newArrayList();
        for (MerchantPropertyDto merchantPropertyDto : merchantPropertyDtos) {
            MerchantPropertyVo vo = new MerchantPropertyVo();
            BeanUtils.copyProperties(merchantPropertyDto,vo);
            merchantPropertyVoList.add(vo);
        }
        return merchantPropertyVoList;
    }
}
