package cn.com.cdboost.charge.merchant.dubbo.impl;

import cn.com.cdboost.charge.base.constant.DeviceType;
import cn.com.cdboost.charge.base.util.CNoUtil;
import cn.com.cdboost.charge.base.util.UuidUtil;
import cn.com.cdboost.charge.merchant.common.BaseServiceImpl;
import cn.com.cdboost.charge.merchant.dao.CardListMapper;
import cn.com.cdboost.charge.merchant.dao.DeviceMapper;
import cn.com.cdboost.charge.merchant.dto.ChargingDeviceDto;
import cn.com.cdboost.charge.merchant.dto.ChargingDevicePortDto;
import cn.com.cdboost.charge.merchant.dto.param.DeviceQueryParam;
import cn.com.cdboost.charge.merchant.dto.param.ICCardListParam;
import cn.com.cdboost.charge.merchant.exception.BusinessException;
import cn.com.cdboost.charge.merchant.model.CardList;
import cn.com.cdboost.charge.merchant.model.Device;
import cn.com.cdboost.charge.merchant.dubbo.WebChargingDeviceService;
import cn.com.cdboost.charge.merchant.vo.info.ChargingDeviceVo;
import cn.com.cdboost.charge.merchant.vo.param.DeviceParam;
import cn.com.cdboost.charge.user.constant.DictItemConstant;
import cn.com.cdboost.charge.user.dto.info.DictItemInfo;
import cn.com.cdboost.charge.user.dubbo.DictService;
import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.dubbo.config.annotation.Service;
import com.google.common.base.Function;
import com.google.common.collect.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Nullable;
import java.util.*;

/**
 * @author wt
 * @desc
 * @create in  2018/10/10
 **/
@Slf4j
@Service(version = "1.0",retries = -1)
public class WebChargingDeviceServiceImpl extends BaseServiceImpl<Device> implements WebChargingDeviceService {
    @Autowired
    DeviceMapper chargingDeviceMapper;
    @Reference(version = "1.0")
    DictService dictItemService;
    @Autowired
    CardListMapper CardListMapper;

    public Device queryByDeviceNo(String deviceNo, String port) {
        Device param = new Device();
        param.setDeviceNo(deviceNo);
        param.setPort(port);
        param.setIsDel(0);
        return chargingDeviceMapper.selectOne(param);
    }
    @Override
    public ChargingDeviceVo queryDeviceDetial(String deviceNo) {
        Device chargingDevice = this.queryByDeviceNo(deviceNo, "1");
        //查询设备基础信息详情
        ChargingDeviceDto chargingDeviceDto = chargingDeviceMapper.queryDeviceDetial(chargingDevice.getChargingPlieGuid());
        //查询字典表通信状态
        if (chargingDeviceDto.getComMethod() != null){
          //  DictItem dictItem = dictItemService.findByCodeAndValue(DictItemConstant.DictCodeConstant.COMMOTHED.getDictCode(), chargingDeviceDto.getComMethod().toString());
           // chargingDeviceDto.setComMethodName(dictItem.getDictItemName());
        }
        List<String> deviceNos = Lists.newArrayList();
        deviceNos.add(deviceNo);
        List<ChargingDevicePortDto> chargingDevicePortDtos = chargingDeviceMapper.deviceAndPortList(deviceNos);

        for (ChargingDevicePortDto chargingDevicePortDto : chargingDevicePortDtos) {
            if ("1".equals(chargingDevicePortDto.getPort())){
                chargingDeviceDto.setRunState1(chargingDevicePortDto.getRunState());
            }else if ("2".equals(chargingDevicePortDto.getPort())){
                chargingDeviceDto.setRunState2(chargingDevicePortDto.getRunState());
            }
        }
        ChargingDeviceVo chargingDeviceVo=new ChargingDeviceVo();
        BeanUtils.copyProperties(chargingDeviceDto,chargingDeviceVo);
        return chargingDeviceVo;
    }
    @Override
    @Transactional
    public void deleteCardList(List<String> deviceNos) {
        Condition condition2 = new Condition(CardList.class);
        Example.Criteria criteria2 = condition2.createCriteria();
        criteria2.andIn("deviceNo",deviceNos);
        CardListMapper.deleteByCondition(condition2);
    }
    @Override
    @Transactional
    public boolean deleteDevice(List<String> deviceNos, Integer userId) {
        for (String deviceNo : deviceNos) {
            Device device = new Device();
            device.setDeviceNo(deviceNo);
            device.setRunState(1);
            List<Device> select = chargingDeviceMapper.select(device);
            if (select.size() > 0){
                throw new BusinessException("不能删除充电中的设备");
            }
        }
        Device device = new Device();
        //设置为删除状态
        device.setIsDel(1);
        device.setUpdateUserId(userId.longValue());
        device.setUpdateTime(new Date());
        //删除设备
        Condition condition = new Condition(Device.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andIn("deviceNo",deviceNos);
        int i = chargingDeviceMapper.updateByConditionSelective(device,condition);
        if (i>0){
            return true;
        }else {
            return false;
        }
    }

    @Override
    public void addCardList(DeviceParam chargingDevice) {
        //调用cardlist存储过程
        ICCardListParam chargerICCardListParam = new ICCardListParam();
        chargerICCardListParam.setProjectGuid(chargingDevice.getProjectGuid());
        chargerICCardListParam.setDeviceNo(chargingDevice.getDeviceNo());
        chargerICCardListParam.setCommNo(chargingDevice.getCommNo());
        CardListMapper.addDevCardList(chargerICCardListParam);
    }
    @Override
    @Transactional
    public void addDevice(DeviceParam chargingDevice, Integer userId) {
        Device device=new Device();
        BeanUtils.copyProperties(chargingDevice,device);
        //根据deviceNo查询数据库
        Device queryVo = new Device();
        queryVo.setDeviceNo(device.getDeviceNo());
        queryVo.setCommNo(device.getCommNo());
        List<Device> list = chargingDeviceMapper.select(queryVo);
        //判断是否已存在此deviceNo
        if (list.size() > 0){
            for (Device device1 : list) {
                if(device1.getIsDel() == 0){
                    throw new BusinessException("设备编号或通信编号不能重复");
                }
            }
        }
        //创建总表cno
        String meterCno = CNoUtil.CreateCNo(DeviceType.ELECTRIC_METER.getCode(), device.getMeterNo());
        device.setMeterCno(meterCno);
        device.setCreateUserId(userId.longValue());
        device.setChargingPlieGuid(UuidUtil.getUuid());
        device.setOnline(1);
        device.setPort("1");
        //数据库写入1号端口
        chargingDeviceMapper.insertSelective(device);
        device.setId(null);
        device.setPort("2");
        device.setChargingPlieGuid(UuidUtil.getUuid());
        //数据库写入2号端口
        chargingDeviceMapper.insertSelective(device);
    }
    @Override
    public List<ChargingDeviceVo> deviceList(cn.com.cdboost.charge.merchant.vo.param.ChargerDeviceQueryParam queryVo, Integer userId) {
        //Set<Long> dataOrgNos = redisService.queryUserOrgNoByUserId(userId);
        Set<Long> dataOrgNos= Sets.newHashSet();
        DeviceQueryParam deviceQueryParam =new DeviceQueryParam();
        BeanUtils.copyProperties(queryVo, deviceQueryParam);
        List list = Lists.newArrayList(dataOrgNos);
        if("1".equals(queryVo.getNodeType())){
            //todo 查询当前组织下的所有子节点
            Set<Long> childOrgNos= Sets.newHashSet();
            dataOrgNos.retainAll(childOrgNos);
        }
        deviceQueryParam.setOrgNoList(list);
        //分页查询所有设备
        Integer pageIndex=(queryVo.getPageNumber()-1)*queryVo.getPageSize();
        deviceQueryParam.setPageNumber(pageIndex);
        List<ChargingDeviceDto> chargingDeviceDtos = chargingDeviceMapper.deviceList(deviceQueryParam);
        List<String> deviceNos = Lists.newArrayList();
        for (ChargingDeviceDto chargingDeviceDto : chargingDeviceDtos) {
            deviceNos.add(chargingDeviceDto.getDeviceNo());
        }

        //查字典表
        List<DictItemInfo> dictCode = dictItemService.queryDictItemList(DictItemConstant.DictCodeConstant.COMMOTHED.getDictCode());

        // 转map
        Map<String,String> dictMap = new HashMap<>();
        for (DictItemInfo dictItem : dictCode) {
            dictMap.put(dictItem.getDictItemValue(),dictItem.getDictItemName());
        }

        //赋值给前端需要的对象
        for (ChargingDeviceDto chargingDeviceDto:chargingDeviceDtos){
            String comMethodName = dictMap.get(String.valueOf(chargingDeviceDto.getComMethod()));
            chargingDeviceDto.setComMethodName(comMethodName);
        }
        //查询设备下的所有端口
        if (CollectionUtils.isEmpty(deviceNos)){//判断是否有设备
            return null;
        }
        List<ChargingDevicePortDto> chargingDevicePortDtos = chargingDeviceMapper.deviceAndPortList(deviceNos);
        ImmutableListMultimap<String, ChargingDevicePortDto> multimap = Multimaps.index(chargingDevicePortDtos, new Function<ChargingDevicePortDto, String>() {
            @Nullable
            @Override
            public String apply(@Nullable ChargingDevicePortDto chargingDeviceDto) {
                return chargingDeviceDto.getDeviceNo();
            }
        });
        List<ChargingDeviceVo> chargingDeviceVos= Lists.newArrayList();
        for (ChargingDeviceDto chargingDeviceDto : chargingDeviceDtos) {
            ImmutableList<ChargingDevicePortDto> chargingDevicePortDtos1 = multimap.get(chargingDeviceDto.getDeviceNo());
            for (ChargingDevicePortDto chargingDevicePortDto : chargingDevicePortDtos1) {
                if ("1".equals(chargingDevicePortDto.getPort())){
                    chargingDeviceDto.setRunState1(chargingDevicePortDto.getRunState());
                }else if ("2".equals(chargingDevicePortDto.getPort())){
                    chargingDeviceDto.setRunState2(chargingDevicePortDto.getRunState());
                }
            }
            ChargingDeviceVo chargingDeviceVo=new ChargingDeviceVo();
            BeanUtils.copyProperties(chargingDeviceDto,chargingDeviceVo);
            chargingDeviceVos.add(chargingDeviceVo);
        }
        //查询总数
        Integer total = chargingDeviceMapper.queryTotal(deviceQueryParam);
        queryVo.setTotal(total.longValue());


        return chargingDeviceVos;
    }
}
