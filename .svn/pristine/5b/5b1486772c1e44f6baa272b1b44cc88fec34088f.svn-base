package cn.com.cdboost.charge.merchant.dubbo.impl;


import cn.com.cdboost.charge.base.exception.BusinessException;
import cn.com.cdboost.charge.base.util.StringUtil;
import cn.com.cdboost.charge.base.util.UuidUtil;
import cn.com.cdboost.charge.merchant.constant.DeviceConstant;
import cn.com.cdboost.charge.merchant.dao.MerchantPropertyMapper;
import cn.com.cdboost.charge.merchant.model.MerchantProperty;
import cn.com.cdboost.charge.merchant.service.IMerchantPropertyService;
import cn.com.cdboost.charge.merchant.dubbo.MerchantPropertyService;
import cn.com.cdboost.charge.merchant.vo.info.MerchantPropertyVo;
import cn.com.cdboost.charge.merchant.vo.dto.TodayMerchantInfo;
import cn.com.cdboost.charge.merchant.vo.param.PropertyQueryParam;
import com.alibaba.dubbo.config.annotation.Service;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import tk.mybatis.mapper.entity.Condition;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import java.util.List;

@Slf4j
@Service(version = "1.0",retries = -1)
public class MerchantPropertyServiceImpl implements MerchantPropertyService {
    @Autowired
    private MerchantPropertyMapper merchantPropertyMapper;
    @Resource
    private IMerchantPropertyService iMerchantPropertyService;

    @Override
    @Transactional
    public void addProperty(MerchantPropertyVo merchantPropertyVo) {
        MerchantProperty merchantProperty = new MerchantProperty();
        merchantProperty.setMerchantGuid(merchantPropertyVo.getMerchantGuid());
        merchantProperty.setPropertyName(merchantPropertyVo.getPropertyName());
        List<MerchantProperty> select = iMerchantPropertyService.select(merchantProperty);
        if (select.size() > 0){
            throw new BusinessException("物业名称不能重复！");
        }
        BeanUtils.copyProperties(merchantPropertyVo,merchantProperty);
        merchantProperty.setPropertyGuid(UuidUtil.getUuid());
        merchantProperty.setIsDel(DeviceConstant.IsDel.NOTDEL.getStatus());
        merchantProperty.setPropertyState(DeviceConstant.PropertyState.NOT_STOP.getStatus());
        //物业名称转拼音
        String fullPinyin = StringUtil.toHanyuPinyin(merchantPropertyVo.getPropertyName());
        merchantProperty.setFullPinyin(fullPinyin);
        merchantProperty.setFirstPinyin(fullPinyin.substring(0,1).toUpperCase());
        iMerchantPropertyService.insertSelective(merchantProperty);
    }

    @Override
    @Transactional
    public void updateProperty(MerchantPropertyVo merchantPropertyVo) {
        //判断修改物业名称是否重复
        Condition condition1 = new Condition(MerchantProperty.class);
        Example.Criteria criteria1 = condition1.createCriteria();
        criteria1.andNotEqualTo("propertyGuid",merchantPropertyVo.getPropertyGuid());
        criteria1.andEqualTo("propertyName",merchantPropertyVo.getPropertyName());
        List<MerchantProperty> merchantProperties = merchantPropertyMapper.selectByCondition(condition1);
        if (merchantProperties.size() > 0){
            throw new BusinessException("物业名称不能重复！");
        }
        iMerchantPropertyService.updateByPropertuGuid(merchantPropertyVo);
    }

    @Override
    @Transactional
    public void deletePropertyByPropertyGuids(List<String> propertyGuids) {
        iMerchantPropertyService.batchDelete(propertyGuids);
    }

    @Override
    public List<MerchantPropertyVo> queryAllMerchantProperty(PropertyQueryParam queryVo) {
        Condition condition = new Condition(MerchantProperty.class);
        Example.Criteria criteria = condition.createCriteria();
        criteria.andEqualTo("merchantGuid",queryVo.getMerchantGuid());
        criteria.andEqualTo("isDel",DeviceConstant.IsDel.NOTDEL.getStatus());
        if (StringUtils.isEmpty(queryVo.getPropertyName())){
            criteria.andLike("propertyName",queryVo.getPropertyName());
        }
        condition.setOrderByClause("first_pinyin");
        List<MerchantProperty> merchantProperties = merchantPropertyMapper.selectByCondition(condition);
        List<MerchantPropertyVo> merchantPropertyVoList = Lists.newArrayList();
        for (MerchantProperty merchantPropertyDto : merchantProperties) {
            MerchantPropertyVo vo = new MerchantPropertyVo();
            BeanUtils.copyProperties(merchantPropertyDto,vo);
            merchantPropertyVoList.add(vo);
        }
        return merchantPropertyVoList;
    }

    @Override
    public MerchantPropertyVo queryMerchantProperty(String propertyGuid) {
        MerchantProperty param = new MerchantProperty();
        param.setPropertyGuid(propertyGuid);
        MerchantProperty merchantProperty = iMerchantPropertyService.selectOne(param);
        MerchantPropertyVo vo = new MerchantPropertyVo();
        BeanUtils.copyProperties(merchantProperty,vo);
        return vo;
    }

    @Override
    public TodayMerchantInfo queryTodayCount(String merchantGuid) {
        TodayMerchantInfo info = iMerchantPropertyService.queryTodayCount(merchantGuid);
        return info;
    }
}
